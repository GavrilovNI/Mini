@using System;
@using System.Linq;
@using System.Threading.Tasks;
@using Sandbox;
@using Sandbox.UI;
@using Mini.Games;

@namespace Mini.UI

@inherits PanelComponent

<root>
	@{
		float timeUntilGameStatusEnd = GamesLauncher.TimeUntilGameStatusEnd;
	}

	@if(_showDeathMessage)
	{
		<label class="death-message">You Died!</label>
	}
	
	@if(GamesLauncher.GameStatus == GameStatus.None)
	{
		@if(!GamesLauncher.HasEnoughPlayers)
		{
			<label class="title">Waiting Players</label>
		}
		else
		{
			<label class="title">Voting ends in @timeUntilGameStatusEnd.CeilToInt()</label>
		}
	}
	else if(GamesLauncher.GameStatus == GameStatus.SetUp)
	{
		<label class="title">Game starts in @timeUntilGameStatusEnd.CeilToInt()</label>
	}
	else if(GamesLauncher.GameStatus == GameStatus.Started)
	{
		<label class="title">Game ends in @timeUntilGameStatusEnd.CeilToInt()</label>
	}
	else if(GamesLauncher.GameStatus == GameStatus.Stopped)
	{
		var winners = GamesLauncher.Winners
			.Select(steamId => Connection.All.FirstOrDefault(c => c.SteamId == steamId, null)?.DisplayName)
			.Where(name => name is not null);

		var winnersString = winners.Any() ? "Winners are " + string.Join(", ", winners) : "Nobody won :(";
		<label class="winners">@winnersString</label>
		<label class="title">Voting starts in @timeUntilGameStatusEnd.CeilToInt()</label>
	}
</root>

@code
{
	public static MainHUD? Instance { get; set; } = null!;

	[Property]
	public GamesLauncher GamesLauncher { get; set; } = null!;
	[Property]
	public float DeathMessageTime { get; set; } = 3f;

	private TimeSince _timeSinceDeathMessageEnabled = 0;
	private bool _showDeathMessage = false;

	protected override Task OnLoad()
	{
		if(Instance.IsValid() && Connection.Local.IsHost)
		{
			GameObject.Destroy();
			return Task.CompletedTask;
		}

		if(!Scene.IsEditor)
			Instance = this;

		return Task.CompletedTask;
	}

	protected override void OnUpdate()
	{
		if(_showDeathMessage && _timeSinceDeathMessageEnabled > DeathMessageTime)
		{
			_showDeathMessage = false;
			StateHasChanged();
		}
	}

	[Button("Show Death Message")]
	public void ShowDeathMessage()
	{
		_showDeathMessage = true;
		_timeSinceDeathMessageEnabled = 0;
		StateHasChanged();
	}

	protected override int BuildHash() => HashCode.Combine(GamesLauncher.HasEnoughPlayers, GamesLauncher.TimeUntilGameStatusEnd, GamesLauncher.GameStatus, Time.Now, _showDeathMessage);
}